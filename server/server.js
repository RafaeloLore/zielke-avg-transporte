require('dotenv').config();

const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const nodemailer = require('nodemailer');
const helmet = require('helmet');
const path = require('path');
const axios = require('axios'); // üîπ –î–æ–±–∞–≤–ª—è–µ–º axios –¥–ª—è reCAPTCHA

const app = express();
const PORT = process.env.PORT || 5000;

// ‚úÖ –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∏–º–ø–æ—Ä—Ç helmet

app.use(
  helmet({
    contentSecurityPolicy: {
      directives: {
        defaultSrc: ["'self'"],
        scriptSrc: ["'self'", "'unsafe-inline'", "https://www.google.com", "https://www.gstatic.com"],
        styleSrc: ["'self'", "'unsafe-inline'"],
        imgSrc: ["'self'", "data:"],
        connectSrc: [
          "'self'",
          "https://www.google.com",
          "https://www.gstatic.com",
          "https://api.emailjs.com" // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º EmailJS
        ],
        frameSrc: ["'self'", "https://www.google.com"],
      },
    },
  })
);

app.use(cors());
app.use(bodyParser.json());

// üîπ –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º—ã —Å reCAPTCHA
app.post('/contact', async (req, res) => {
  const { name, email, message, captchaToken } = req.body;

  // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞–ø—á–∞
  if (!captchaToken) {
    return res.status(400).json({ error: '–û—à–∏–±–∫–∞: –ù–µ –ø—Ä–æ–π–¥–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ reCAPTCHA' });
  }

  // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–ø—á—É —á–µ—Ä–µ–∑ API Google

  const isCaptchaValid = await verifyCaptcha(captchaToken);
  if (!isCaptchaValid) {
    return res.status(400).json({ error: '–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á reCAPTCHA' });
  }

  // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã
  if (!name || !email || !message) {
    return res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!' });
  }

  // üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nodemailer
  const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASS,
    },
  });

  const mailOptions = {
    from: `"${name}" <${email}>`, // ‚ö†Ô∏è –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å ‚Äî email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    to: process.env.EMAIL_RECEIVER,
    subject: '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞',
    text: `–ò–º—è: ${name}\nEmail: ${email}\n–°–æ–æ–±—â–µ–Ω–∏–µ: ${message}`,
    replyTo: email // ‚ö†Ô∏è –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –ø—Ä—è–º–æ –Ω–∞ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  };

  try {
    await transporter.sendMail(mailOptions);
    res.status(200).json({ message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.' });
  }
});
app.post("/contact", async (req, res) => {
  console.log("üìå –ü–æ–ª—É—á–µ–Ω–Ω—ã–π captchaToken –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", req.body.captchaToken);
});


// üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Google reCAPTCHA
async function verifyCaptcha(token) {
  try {
    const response = await axios.post(
      `https://www.google.com/recaptcha/api/siteverify`,
      null,
      {
        params: {
          secret: process.env.RECAPTCHA_SECRET_KEY, // üîπ –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á reCAPTCHA –∏–∑ .env
          response: token,
        },
      }
    );
    return response.data.success;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ reCAPTCHA:', error);
    return false;
  }
}

// üîπ –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ React
app.use(express.static(path.join(__dirname, '../dist')));

app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, '../dist/index.html'));
});
console.log("üîç RECAPTCHA_SECRET_KEY:", process.env.RECAPTCHA_SECRET_KEY);
console.log("üîç EMAIL_USER:", process.env.EMAIL_USER);


// üîπ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});
