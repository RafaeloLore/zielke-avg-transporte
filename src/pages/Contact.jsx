import React, { useState } from "react";
import { useForm } from "react-hook-form";
import emailjs from "@emailjs/browser";
import axios from "axios";
import ReCAPTCHA from "react-google-recaptcha";
import "../styles/Contact.css";

function Contact() {
  const { register, handleSubmit, reset } = useForm();
  const [captchaValue, setCaptchaValue] = useState(null);
  const [message, setMessage] = useState("");

  // üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ reCAPTCHA
  const handleCaptchaChange = (value) => {
    setCaptchaValue(value);
  };

  // üîπ –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ email —á–µ—Ä–µ–∑ Abstract API
  const verifyEmail = async (email) => {
    try {
      const response = await axios.get(
        `https://emailvalidation.abstractapi.com/v1/`,
        {
          params: {
            api_key: "9de54409d89248c285544da3177c9260", // üîπ –í—Å—Ç–∞–≤—å API –∫–ª—é—á
            email: email,
          },
        }
      );

      console.log("üì© –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ email:", response.data);

      return (
        response.data.is_valid_format.value &&
        response.data.deliverability === "DELIVERABLE"
      );
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ email:", error);
      return false;
    }
  };

  // üîπ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
  const onSubmit = async (data) => {
    console.log("üì® –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:", data);

    if (!captchaValue) {
      setMessage("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç.");
      return;
    }

    // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º email –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    const isEmailValid = await verifyEmail(data.email);
    if (!isEmailValid) {
      setMessage("‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π email –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.");
      return;
    }

    // üîπ –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ EmailJS
    const emailData = {
      from_name: data.name,
      from_email: data.email,
      message: data.message,
      reply_to: data.email,
    };

    // üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —á–µ—Ä–µ–∑ EmailJS
    emailjs
      .send(
        "service_0e1omid", // Service ID
        "template_slv3dxb", // Template ID
        emailData,
        "IDxfo24Ry1NIB7uLa" // Public Key
      )
      .then(
        () => {
          setMessage("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!");
          reset();
          setCaptchaValue(null);
        },
        (error) => {
          setMessage("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
          console.error("–û—à–∏–±–∫–∞ EmailJS:", error);
        }
      );
  };

  return (
    <div className="contact-container">
      <h1>–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏</h1>
      <p>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É, –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.</p>

      <form onSubmit={handleSubmit(onSubmit)} className="contact-form">
        <label>–í–∞—à–µ –∏–º—è:</label>
        <input type="text" {...register("name", { required: true })} required />

        <label>Email:</label>
        <input type="email" {...register("email", { required: true })} required />

        <label>–°–æ–æ–±—â–µ–Ω–∏–µ:</label>
        <textarea {...register("message", { required: true })} required></textarea>

        {/* reCAPTCHA */}
        <ReCAPTCHA
          sitekey="6LdgHscqAAAAAKZNCIINSjBt_7_viG7qN1LSyySA" // –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à Site Key
          onChange={handleCaptchaChange}
        />

        <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
        {message && <p className="form-message">{message}</p>}
      </form>
    </div>
  );
}

export default Contact;
